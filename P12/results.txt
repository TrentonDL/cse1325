====================
HOMEWORK P12 RESULTS
====================

Spring 2023

NOTE: We will not be grading for "correct" answers, since your results may vary, but rather answers that are consistent with your measured results.

IMPORTANT: If at all possible, time your program on a machine with at least 4 cores. (CSE VM may be configured to use multiple cores in the VirtualBox properties panel.)

FULL CREDIT
===========

QUESTION 1: Which puzzle did you use as ThreadsOfSudoku's parameter to achieve a 30+ second runtime (using "real"): $ time java ThreadsOfSudoku 5 puzzle.txt 14_zeros

QUESTION 2: Provide the full ``time`` output for your program, with 1 to 16 threads. It may prove interesting to screenshot your system monitor while these run. You may be able to run all of these with a single bash command if you like (replace 14_zeros with your puzzle from QUESTION 1): 

for i in {1..16} ; do printf "\n Threads %d:\n" $i ; time (java ThreadsOfSudoku $i puzzle.txt 14_zeros > temp.txt) ; done

Example Timing (first 2 of 16 runs only on Antares):

ricegf@antares$ for i in {1..16} ; do printf "\n Threads %d:\n" $i ; time (java ThreadsOfSudoku $i puzzle.txt 14_zeros > temp.txt) ; done

 Threads 1:

real	2m0.684s
user	2m0.919s
sys	0m0.292s

 Threads 2:

real	1m4.553s
user	2m7.003s
sys	0m0.252s



YOUR Timing:

 Threads 1:

real    2m6.137s
user    0m0.000s
sys     0m0.000s

 Threads 2:

real    1m3.792s
user    0m0.000s
sys     0m0.000s

 Threads 3:

real    0m45.318s
user    0m0.000s
sys     0m0.000s

 Threads 4:

real    0m37.564s
user    0m0.000s
sys     0m0.015s

 Threads 5:

real    0m29.573s
user    0m0.000s
sys     0m0.000s

 Threads 6:

real    0m27.615s
user    0m0.000s
sys     0m0.015s

 Threads 7:

real    0m22.025s
user    0m0.000s
sys     0m0.000s

 Threads 8:

real    0m21.764s
user    0m0.000s
sys     0m0.000s

 Threads 9:

real    0m19.460s
user    0m0.000s
sys     0m0.000s

 Threads 10:

real    0m16.956s
user    0m0.000s
sys     0m0.015s

 Threads 11:

real    0m16.500s
user    0m0.000s
sys     0m0.000s

 Threads 12:

real    0m17.212s
user    0m0.000s
sys     0m0.000s

 Threads 13:

real    0m17.571s
user    0m0.000s
sys     0m0.000s

 Threads 14:

real    0m17.252s
user    0m0.000s
sys     0m0.000s

 Threads 15:

real    0m17.859s
user    0m0.000s
sys     0m0.000s

 Threads 16:

real    0m17.537s
user    0m0.000s
sys     0m0.000s




QUESTION 3: Does adding more threads continue to speed up the program? Do more threads ever slow down the program slightly?  Why or why not?

to an point yes, the more threads can speed up the process for the computer but the more threads added the less the actucal gain is in performance speed



QUESTION 4: Does adding more threads increase the "system load", or is it constant regardless of the number of threads?  Why?

with the more threads added the system load does increase as it focuses more resources to that task however the more thread allocated the less time the process need thoose threads so they can go back to be reallocated to something else
(thank you Ryzen 9 3950x for crushing these task in no time though) highest usage was at about 82% capacity


BONUS
=====

QUESTION 5: Time your thread pool version of ThreadsOfSudoku as you did for the full credit version. Post your timings here.

YOUR Timing:






QUESTION 6: Is a thread pool faster, slower, or roughly equivalent in performance? 



QUESTION 7: Compare the full credit and bonus solution code. Which do you believe is more supportable over a long lifetime of evolving hardware and environments?


